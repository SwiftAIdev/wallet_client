# coding: utf-8

"""
    Wallet Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wallet_client.models.invoice_schema import InvoiceSchema
from typing import Optional, Set
from typing_extensions import Self

class WalletSchema(BaseModel):
    """
    WalletSchema
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID настроек")
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = Field(default=None, description="Дата последнего обновления")
    is_delete: Optional[StrictBool] = False
    user_id: StrictStr
    wallet_id: StrictStr
    invoices: Optional[List[InvoiceSchema]] = None
    is_testing: StrictBool
    testing_end: Optional[datetime] = None
    currency_code: Optional[StrictStr] = 'RUB'
    balance: Optional[Union[StrictFloat, StrictInt]] = 0
    expenses: Optional[Union[StrictFloat, StrictInt]] = 0
    opening_balance: Optional[Union[StrictFloat, StrictInt]] = 0
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "is_delete", "user_id", "wallet_id", "invoices", "is_testing", "testing_end", "currency_code", "balance", "expenses", "opening_balance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WalletSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict['invoices'] = _items
        # set to None if testing_end (nullable) is None
        # and model_fields_set contains the field
        if self.testing_end is None and "testing_end" in self.model_fields_set:
            _dict['testing_end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WalletSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_delete": obj.get("is_delete") if obj.get("is_delete") is not None else False,
            "user_id": obj.get("user_id"),
            "wallet_id": obj.get("wallet_id"),
            "invoices": [InvoiceSchema.from_dict(_item) for _item in obj["invoices"]] if obj.get("invoices") is not None else None,
            "is_testing": obj.get("is_testing"),
            "testing_end": obj.get("testing_end"),
            "currency_code": obj.get("currency_code") if obj.get("currency_code") is not None else 'RUB',
            "balance": obj.get("balance") if obj.get("balance") is not None else 0,
            "expenses": obj.get("expenses") if obj.get("expenses") is not None else 0,
            "opening_balance": obj.get("opening_balance") if obj.get("opening_balance") is not None else 0
        })
        return _obj


